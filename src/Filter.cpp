/***********************************************************************/
/*                                                                     */
/*  FILE        :Filter.c                                             */
/*  DATE        :Sat, Jul 4, 2020                                      */
/*  DESCRIPTION :Filtering Program                                     */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki.                        */
/*                                                                     */
/***********************************************************************/

#include <Arduino.h>

#include "Filter.h"

#include <math.h>

/***********************************************************************/
/*                      1次のフィルタリング関数                        */
/***********************************************************************/
#ifndef MY_PI
#define MY_PI (3.14159276f)
#endif

/* フィルタの時定数を計算する関数 */
fix FirstFilter::calcTC(float freq, uint16_t cycleTime)
{
  freq = 1.0 - expf(-2.0 * MY_PI * freq * (float)cycleTime / 1000.0f);
  return (FLOAT_TO_FIX(freq));
}

/* 時定数からカットオフ周波数を計算 */
float FirstFilter::calcFREQ(fix tc, uint16_t cycleTime)
{
  float temp = FIX_TO_FLOAT(tc);
  temp = 1.0 - temp;
  return (-logf(temp) * 1000.0f / (float)cycleTime / 2.0 / MY_PI);
}

/* フィルタを使う構造体の初期化 */
FirstFilter::FirstFilter(enum eFILT_MODE fimo, float freq, uint16_t cycleTime, fix x0)
  : _out(0), _mode(fimo), _tc(calcTC(freq, cycleTime)), _lpf(x0)
{
}

// ローパスフィルタ値を返す
fix FirstFilter::getLPF(void)
{
  return (_lpf);
}

// ローパスフィルタ値を設定する
void FirstFilter::setLPF(fix lpf)
{
  _lpf = lpf;
}

// フィルタ出力値を返す
fix FirstFilter::getOut(void)
{
  return (_out);
}

/* 1次フィルタをかける関数 */
fix FirstFilter::firstFiltering(fix in)
{
  _lpf += FIX_MUL(in - _lpf, _tc);
  if (_mode == LPF)
    _out = _lpf;
  else if (_mode == HPF)
    _out = in - _lpf;
  else
    _out = 0;
  return (_out);
}

/***********************************************************************/
/*                          移動平均フィルタ                           */
/***********************************************************************/

#define NEXT(n, size) (((n) + 1) % (size))
#define BEFORE(n, size) (((n) + (size)-1) % (size))

MovAveFilter::MovAveFilter(uint8_t size, fix x0) : _out(x0), _size(size), _now(0), _sum(x0 * size)
{
  _data = new fix[_size];
  setData(x0);
}

MovAveFilter::~MovAveFilter()
{
  delete[] _data;
}

/**
 * @brief 指定した値で移動平均バッファの値を初期化する
 *
 * @param x0
 */
void MovAveFilter::setData(fix x0)
{
  for (uint8_t i = 0; i < _size; i++)
  {
    _data[i] = x0;
  }
  _sum = (int64_t)x0 * (int64_t)_size;
}

fix MovAveFilter::movingAverage(fix xn)
{
  _sum -= (int64_t)_data[_now]; /* 一番古いのを消して */
  _sum += (int64_t)xn;          /* 一番新しいのを足す */
  _data[_now] = xn;             /* バッファに書きこむ */
  _now = NEXT(_now, _size);

  _out = (fix)(_sum / (int64_t)_size);
  return _out;
}

// フィルタ出力値を返す
fix MovAveFilter::getOut(void)
{
  return _out;
}
